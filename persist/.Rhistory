geom_vline(xintercept = -10)+
geom_vline(xintercept = 10)+
theme_light()+
ylab(label = "Percent Change in Sites Occupied")+
xlab(label="")+
scale_color_manual(values = c("#ff9999", "#018081"))+
scale_shape_manual(values=c(17, 16))+
scale_y_continuous(limits = c(0,600))+
coord_flip()+
theme(#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,face = 2),
legend.title = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.text.y = element_text(size=12, color = "black"),
axis.text.x = element_text(size=10, color = "black"),
axis.ticks.x = element_blank())+
scale_y_break(c(250, 500), ticklabels = c(0,25,50,75,100,150,200,250,500))
changenative
changenative=NETsub%>%
ggplot(aes(x=reorder(CommonName,-percChange),y=percChange, colour = Status, shape = Status))+
geom_hline(yintercept = 100, color=alpha("black", alpha = 0.3), linewidth=1.1)+
geom_segment( aes(x=CommonName, xend=CommonName, y=100, yend=percChange), color="black") +
geom_point(size=3)+
geom_hline(yintercept = -10)+
geom_hline(yintercept = 10)+
theme_light()+
ylab(label = "Percent Change in Sites Occupied")+
xlab(label="")+
scale_color_manual(values = c("#ff9999", "#018081"))+
scale_shape_manual(values=c(17, 16))+
scale_y_continuous(limits = c(0,600))+
coord_flip()+
theme(#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,face = 2),
legend.title = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.text.y = element_text(size=12, color = "black"),
axis.text.x = element_text(size=10, color = "black"),
axis.ticks.x = element_blank())+
scale_y_break(c(250, 500), ticklabels = c(0,25,50,75,100,150,200,250,500))
changenative
changenative=NETsub%>%
ggplot(aes(x=reorder(CommonName,-percChange),y=percChange, colour = Status, shape = Status))+
geom_hline(yintercept = 100, color=alpha("black", alpha = 0.3), linewidth=1.1)+
geom_segment( aes(x=CommonName, xend=CommonName, y=100, yend=percChange), color="black") +
geom_point(size=3)+
theme_light()+
ylab(label = "Percent Change in Sites Occupied")+
xlab(label="")+
scale_color_manual(values = c("#ff9999", "#018081"))+
scale_shape_manual(values=c(17, 16))+
scale_y_continuous(limits = c(0,600))+
coord_flip()+
geom_vline(xintercept = -10)+
geom_vline(xintercept = 10)+
theme(#axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,face = 2),
legend.title = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.border = element_blank(),
axis.text.y = element_text(size=12, color = "black"),
axis.text.x = element_text(size=10, color = "black"),
axis.ticks.x = element_blank())+
scale_y_break(c(250, 500), ticklabels = c(0,25,50,75,100,150,200,250,500))
changenative
changenative+geom_vline(xintercept = -10)+geom_vline(xintercept = 10)+
ggsave(filename="NativeSpChange.tiff",dpi = 400, width = 10, height = 8, units = "in")
changenative+geom_vline(xintercept = -10)+geom_vline(xintercept = 10)
changenative+geom_hline(yintercept = -10)+geom_hline(yintercept = 10)
View(NETsub)
100-15
summary(ssn_mod)
#full model -- max likelihood
ssn_mod <- ssn_glm(
formula =   pComm~ scale(temp)+scale(size)+scale(barrier)+scale(length)+scale(pisc),
family = "beta",
ssn.object = nssn,
tailup_type = "exponential",
taildown_type = "exponential",
euclid_type = "exponential",
random = ~as.factor(YrangeCat),
spcov_type = "exponential",
additive = "afvArea"
)
#full model -- max likelihood
ssn_modN <- ssn_glm(
formula =   pNat~ scale(temp)+scale(size)+scale(barrier)+scale(length)+scale(pisc),
family = "beta",
ssn.object = nssn,
tailup_type = "exponential",
taildown_type = "exponential",
euclid_type = "exponential",
random = ~as.factor(YrangeCat),
spcov_type = "exponential",
additive = "afvArea"
)
quantile(nssn$obs$Yrange)
nssn$obs$YrangeCat=NA
nssn$obs$YrangeCat[which(nssn$obs$Yrange<16)]="S"
nssn$obs$YrangeCat[which(nssn$obs$Yrange>=16 & nssn$obs$Yrange<22)]="M"
nssn$obs$YrangeCat[which(nssn$obs$Yrange>=22 & nssn$obs$Yrange<30)]="L"
nssn$obs$YrangeCat[which(nssn$obs$Yrange>=30)]="XL"
#==================================================================================
#============================SECTION 2: SSN Models for Community & Functional Level
#==================================================================================
#Identify predictors with multicolinearity
library(PerformanceAnalytics)
mdata=nssn$obs[,c(16,21,23,24,32)]
mdata=as.data.frame(mdata)
mdata$geometry=NULL
chart.Correlation(mdata, histogram=TRUE, pch=19)
#rename variables
nssn$obs=nssn$obs%>%rename("temp"="S1_93_1", "size"="F_MAUG_", "barrier"="DSbarrr","length"="Lngth_k","pisc"="nnPreds")
nssn$obs=nssn$obs%>%rename("pComm"="persCmm", "pNat"="persNtv", "rGlac"="prsSmGl","rPela"="pelagcs","rPeri"="peridcs","rMont"="montane")
View(nssn$obs)
################################################################
library(SSNbler)
library(SSN2)
library(caret)
library(tidyverse)
library(sf)
library(spmodel)
#======================================================
#============================SECTION 1: SSN Preparation
#======================================================
#------------------Importing Required Data---------------------
## import the streams, observation sites
streams <- st_read("NSI_fix6.shp")
obs <- st_read("newmetrics.shp")
removes=read.csv("REMOVES.csv")
removes=removes[,c(1,3)]
removes=removes%>%rename("RepetID"="RepeatID")
obs=left_join(obs,removes,by="RepetID")
obs=subset(obs,obs$GearMiss!="Y")
obs=subset(obs, obs$F_MAUG_<1000)
obs=subset(obs, obs$RepetID!=234 & obs$RepetID!=74& obs$RepetID!=237& obs$RepetID!=238)
streams=st_cast(streams, to="LINESTRING")
streams <- st_transform(streams, crs = 5070)
obs <- st_transform(obs, crs = 5070)
## Plot the data using ggplot2
ggplot() +
geom_sf(data = streams) +
geom_sf(data = obs, color = "blue", size = 2) +
coord_sf(datum = st_crs(streams))
# --------------- Build the LSN -------------------------------
## Set the lsn.path variable
lsn.path <- "persist_LSN/"
## Build the LSN
edges <- lines_to_lsn(
streams = streams,
lsn_path = lsn.path,
check_topology = TRUE,
snap_tolerance = 0.05,
topo_tolerance = 20,
overwrite = TRUE
)
# ----------- Incorporate sites into LSN -----------------------
## Incorporate observations. Pay attention to output messages in R
obs <- sites_to_lsn(
sites = obs,
edges = edges,
lsn_path = lsn.path,
file_name = "obs",
snap_tolerance = 200,
save_local = TRUE,
overwrite = TRUE
)
# --------- Calculate upstream distance for edges ------------
edges$GNIS_ID=as.numeric(edges$GNIS_ID)
edges <- updist_edges(
edges = edges,
save_local = TRUE,
lsn_path = lsn.path,
calc_length = TRUE
)
# ---------- Calculate upstream distance for sites -----------
site.list <- updist_sites(
sites = list(
obs = obs),
edges = edges,
length_col = "Length",
save_local = TRUE,
lsn_path = lsn.path
)
## Plot the upstream distances for edges and obs
ggplot() +
geom_sf(data = edges, aes(color = upDist)) +
geom_sf(data = site.list$obs, aes(color = upDist)) +
coord_sf(datum = st_crs(streams)) +
scale_color_viridis_c()
# ------- Calculate AFV for edges --------------------------------
## Summarize h2oAreaKm2 and check for zeros
summary(edges$TotDASqKM)
edges <- afv_edges(
edges = edges,
infl_col = "TotDASqKM",
segpi_col = "areaPI",
afv_col = "afvArea",
lsn_path = lsn.path
)
# ------- Calculate AFV for sites -------------------------------
site.list <- afv_sites(
sites = site.list,    ## Input is a named list
edges = edges,
afv_col = "afvArea",
save_local = TRUE,
lsn_path = lsn.path
)
# ---------- Assemble the SSN Object -----------------------------
nssn <- ssn_assemble(
edges = edges,
lsn_path = lsn.path,
obs_sites = site.list$obs,
ssn_path = "nssn.ssn",
import = TRUE,
check = TRUE,
afv_col = "afvArea",
overwrite = TRUE
)
################################################################
# R script for Clancy Dissertation Chapter on Empirical Characteristics of Refugia
#######LIMITING ANALYSIS TO PERSISTENCE/EXTIRPATION SITES (COLONIZATION POINTS REMOVED) 11-19-2024
################################################################
library(SSNbler)
library(SSN2)
library(caret)
library(tidyverse)
library(sf)
library(spmodel)
#======================================================
#============================SECTION 1: SSN Preparation
#======================================================
#------------------Importing Required Data---------------------
## import the streams, observation sites
streams <- st_read("NSI_fix6.shp")
obs <- st_read("newmetrics.shp")
removes=read.csv("REMOVES.csv")
removes=removes[,c(1,3)]
removes=removes%>%rename("RepetID"="RepeatID")
obs=left_join(obs,removes,by="RepetID")
obs=subset(obs,obs$GearMiss!="Y")
obs=subset(obs, obs$F_MAUG_<1000)
obs=subset(obs, obs$RepetID!=234 & obs$RepetID!=74& obs$RepetID!=237& obs$RepetID!=238)
streams=st_cast(streams, to="LINESTRING")
streams <- st_transform(streams, crs = 5070)
obs <- st_transform(obs, crs = 5070)
## Plot the data using ggplot2
ggplot() +
geom_sf(data = streams) +
geom_sf(data = obs, color = "blue", size = 2) +
coord_sf(datum = st_crs(streams))
# --------------- Build the LSN -------------------------------
## Set the lsn.path variable
lsn.path <- "persist_LSN/"
## Build the LSN
edges <- lines_to_lsn(
streams = streams,
lsn_path = lsn.path,
check_topology = TRUE,
snap_tolerance = 0.05,
topo_tolerance = 20,
overwrite = TRUE
)
# ----------- Incorporate sites into LSN -----------------------
## Incorporate observations. Pay attention to output messages in R
obs <- sites_to_lsn(
sites = obs,
edges = edges,
lsn_path = lsn.path,
file_name = "obs",
snap_tolerance = 200,
save_local = TRUE,
overwrite = TRUE
)
# --------- Calculate upstream distance for edges ------------
edges$GNIS_ID=as.numeric(edges$GNIS_ID)
edges <- updist_edges(
edges = edges,
save_local = TRUE,
lsn_path = lsn.path,
calc_length = TRUE
)
# ---------- Calculate upstream distance for sites -----------
site.list <- updist_sites(
sites = list(
obs = obs),
edges = edges,
length_col = "Length",
save_local = TRUE,
lsn_path = lsn.path
)
## Plot the upstream distances for edges and obs
ggplot() +
geom_sf(data = edges, aes(color = upDist)) +
geom_sf(data = site.list$obs, aes(color = upDist)) +
coord_sf(datum = st_crs(streams)) +
scale_color_viridis_c()
# ------- Calculate AFV for edges --------------------------------
## Summarize h2oAreaKm2 and check for zeros
summary(edges$TotDASqKM)
edges <- afv_edges(
edges = edges,
infl_col = "TotDASqKM",
segpi_col = "areaPI",
afv_col = "afvArea",
lsn_path = lsn.path
)
# ------- Calculate AFV for sites -------------------------------
site.list <- afv_sites(
sites = site.list,    ## Input is a named list
edges = edges,
afv_col = "afvArea",
save_local = TRUE,
lsn_path = lsn.path
)
# ---------- Assemble the SSN Object -----------------------------
nssn <- ssn_assemble(
edges = edges,
lsn_path = lsn.path,
obs_sites = site.list$obs,
ssn_path = "nssn.ssn",
import = TRUE,
check = TRUE,
afv_col = "afvArea",
overwrite = TRUE
)
## Look at the observations in the SSN object. Notice the new columns
## added when the SSN was assembled
class(nssn$obs)
names(nssn$obs)
## Plot ssn
ggplot() +
geom_sf(
data = nssn$edges,
color = "medium blue",
aes(linewidth = log10(TotDASqKM))
) +
scale_linewidth(range = c(0.1, 2)) +
geom_sf(
data = nssn$obs,
size = 1.7
)
# ---- Create Distance Matrices ----------------------------------
## Generate hydrologic distance matrices
ssn_create_distmat(nssn)
## Output a list of distance matrices for obs
obs.distmat<- ssn_get_stream_distmat(nssn,
name = "obs")
names(obs.distmat)
colnames(obs.distmat[[1]])
## Create symmetric hydrologic distance matrix
obs.distmat2 <- obs.distmat[[1]] + t(obs.distmat[[1]])
view(nssn$obs)
#==================================================================================
#============================SECTION 2: SSN Models for Community & Functional Level
#==================================================================================
#Identify predictors with multicolinearity
library(PerformanceAnalytics)
mdata=nssn$obs[,c(16,21,23,24,32)]
mdata=as.data.frame(mdata)
mdata$geometry=NULL
chart.Correlation(mdata, histogram=TRUE, pch=19)
#rename variables
nssn$obs=nssn$obs%>%rename("temp"="S1_93_1", "size"="F_MAUG_", "barrier"="DSbarrr","length"="Lngth_k","pisc"="nnPreds")
nssn$obs=nssn$obs%>%rename("pComm"="persCmm", "pNat"="persNtv", "rGlac"="prsSmGl","rPela"="pelagcs","rPeri"="peridcs","rMont"="montane")
View(nssn$obs)
#-----------Native Species Persistence Models-------------------------------------------------------------------------
mdata=subset(nssn$obs,!is.na(nssn$obs$pNat))
mdata=mdata[,c(16,21,23,24,32)]
mdata$geometry=NULL
chart.Correlation(mdata, histogram=TRUE, pch=19)
disp_init <- dispersion_initial(family = "beta", dispersion = 1, known = "dispersion")
#full model -- max likelihood
ssn_modN <- ssn_glm(
formula =   pNat~ scale(temp)+scale(size)+scale(barrier)+scale(length)+scale(pisc),
family = "beta",
ssn.object = nssn,
tailup_type = "exponential",
taildown_type = "exponential",
euclid_type = "exponential",
random = ~as.factor(YrangeCat),
spcov_type = "exponential",
additive = "afvArea"
)
quantile(nssn$obs$Yrange)
nssn$obs$YrangeCat=NA
nssn$obs$YrangeCat[which(nssn$obs$Yrange<16)]="S"
nssn$obs$YrangeCat[which(nssn$obs$Yrange>=16 & nssn$obs$Yrange<22)]="M"
nssn$obs$YrangeCat[which(nssn$obs$Yrange>=22 & nssn$obs$Yrange<30)]="L"
nssn$obs$YrangeCat[which(nssn$obs$Yrange>=30)]="XL"
#-----------Native Species Persistence Models-------------------------------------------------------------------------
mdata=subset(nssn$obs,!is.na(nssn$obs$pNat))
mdata=mdata[,c(16,21,23,24,32)]
mdata$geometry=NULL
chart.Correlation(mdata, histogram=TRUE, pch=19)
disp_init <- dispersion_initial(family = "beta", dispersion = 1, known = "dispersion")
#full model -- max likelihood
ssn_modN <- ssn_glm(
formula =   pNat~ scale(temp)+scale(size)+scale(barrier)+scale(length)+scale(pisc),
family = "beta",
ssn.object = nssn,
tailup_type = "exponential",
taildown_type = "exponential",
euclid_type = "exponential",
random = ~as.factor(YrangeCat),
spcov_type = "exponential",
additive = "afvArea"
)
summary(ssn_modN)
sizegraph.turn=nssn$obs%>%
ggplot(aes(x=length, y=Turnover))+
stat_smooth(method = "glm", method.args = list(family=binomial), linewidth=1.5, color="black")+
geom_jitter()+
ylab(label = "Community Turnover")+
xlab(label = "Fragment Length (km)")+
ggtitle(label = "Turnover by Fragment Length")+
#ylim(limits=c(0.3,1))+
theme_classic()+
theme(axis.title = element_text(size=12),
axis.text = element_text(size=10, color = "black"))
sizegraph.turn
pers_sub=read.csv("PersistenceSubset.csv")
obs2=pers_sub
relict=obs2%>%pivot_longer(cols=35:118,names_to = "Species", values_to = "change")
####FROM HERE, MUST RUN "DatasetPrep.R" for section
relict=subset(relict,!is.na(relict$change))
traits=read.csv("traits.csv")
traits=traits%>%rename("Species"="Code")
relict=left_join(relict,traits,by="Species")
relict$Status[which(relict$Species=="RDSH")]="Native"
relict$Status[which(relict$Species=="RDSH" & relict$RepeatID %in% rdshnn)]="Introduced"
relict$Status[which(relict$Species=="LKCH" & relict$RepeatID %in% lkchnn)]="Introduced"
relict$Status[which(relict$Species=="FHMN" & relict$RepeatID %in% FHMNnn)]="Introduced"
relict$Status[which(relict$Species=="LNDC" & relict$RepeatID %in% LNDCnn)]="Introduced"
relict$Status[which(relict$Species=="CRCH" & relict$RepeatID %in% CRCHnn)]="Introduced"
relict$Status[which(relict$Species=="BLBH")]="Native"
relict$Status[which(relict$Species=="BLBH" & relict$RepeatID %in% BLBHnn)]="Introduced"
relict$Status[which(relict$Species=="CCAT" & relict$RepeatID %in% CCATnn)]="Introduced"
relict$Status[which(relict$Species=="LING" & relict$RepeatID %in% LINGnn)]="Introduced"
relict$Status[which(relict$Species=="WSU" & relict$RepeatID %in% WSUnn)]="Introduced"
relict$Status[which(relict$Species=="RMCT" & relict$RepeatID %in% RMCTnn)]="Introduced"
relict$Status[which(relict$Species=="DRUM")]="Native"
relict$Status[which(relict$Species=="DRUM" & relict$RepeatID %in% drumnn)]="Introduced"
relict$Status[which(relict$Species=="PKF")]="Native"
relict$Status[which(relict$Species=="PKF" & relict$RepeatID %in% pkfnn)]="Introduced"
relict$Status[which(relict$Species=="PTMN")]="Native"
relict$Status[which(relict$Species=="PTMN" & relict$RepeatID %in% ptmnnn)]="Introduced"
relict$Status[which(relict$Species=="BRSB")]="Native"
relict$Status[which(relict$Species=="BRSB" & relict$RepeatID %in% brsbnn)]="Introduced"
relict=subset(relict,relict$Status=="Native")
relict=relict[,-c(39:52)]
flowavgs=read.csv("FlowAverages.csv")
traits=read.csv("traits.csv")
traits=traits%>%rename("Species"="Code")
traits=left_join(traits,flowavgs,by="Species")
smallrelicts=subset(traits, traits$Glacial=="E")
smallrelicts=smallrelicts$Species
relict$X=NULL
obsrelict=relict
obsrelict=subset(obsrelict,obsrelict$Species%in%smallrelicts)
obsrelict=subset(obsrelict,!is.na(obsrelict$change))
obsrelcol=obsrelict%>%group_by(RepeatID)%>%summarise(persSmGlacial=mean(change))
obsrelcol$geometry=NULL
obsrelcol=obsrelcol%>%rename("pGlac"="persSmGlacial")
obsrelcol2=obsrelcol
obsrelcol2=subset(obsrelcol2,!is.na(obsrelcol2$pGlac))
#Add to nssn
obsrelcol=obsrelcol%>%rename("RepetID"="RepeatID")
nssn$obs$pGlac=NULL
nssn$obs=left_join(nssn$obs,obsrelcol,by="RepetID")
PostglacialsXSite=obsrelict%>%
group_by(RepeatID)%>%
summarise(numPostglac=length(unique(Species)), pGlac = mean(change), LAT=mean(LATITUDE),LONG=mean(LONGITUDE))
PostNoComm=obsrelict%>%filter(Species!="FHMN"&Species!="WSU")%>%
group_by(RepeatID)%>%
summarise(numPostglac=length(unique(Species)), pGlac = mean(change), LAT=mean(LATITUDE),LONG=mean(LONGITUDE))
PostNoComm=PostNoComm%>%filter(RepeatID%in%finalRepeatlist)
PostComm=obsrelict%>%filter(Species=="FHMN"|Species=="WSU")%>%
group_by(RepeatID)%>%
summarise(numCommon=length(unique(Species)))
finalRepeatlist=unique(nssn$obs$RepetID)
PostglacialsXSite=PostglacialsXSite%>%filter(RepeatID%in%finalRepeatlist)
post=PostglacialsXSite
post=left_join(post,PostComm,by="RepeatID")
post$pCommon=NA
post$pCommon=post$numCommon/post$numPostglac
post$pCommon[which(is.na(post$pCommon))]=0
post%>%
ggplot(aes(x=numPostglac, y=pGlac, color=pCommon))+
geom_jitter()+
scale_colour_viridis_b()+
stat_smooth(method = "glm", method.args = list(family=binomial), se=T, linewidth=1.5, color="black")+
theme_bw()+
ylab(label = "Postglacial Pioneer Persistence at Site")+
xlab("Postglacial Pioneer Species Richness at Site")
mean(post$pGlac)
PostNoComm%>%
ggplot(aes(x=numPostglac, y=pGlac))+
geom_jitter(color="darkgrey")+
stat_smooth(method = "glm", method.args = list(family=binomial), se=T, linewidth=1.5, color="black")+
theme_bw()+
ylab(label = "Postglacial Pioneer Persistence at Site")+
xlab("Postglacial Pioneer Species Richness at Site")
mean(PostNoComm$pGlac)
sd(PostNoComm$pGlac)
length(PostNoComm$pGlac)
post.lm=glm(post$pGlac~post$numPostglac,family = "binomial")
summary(post.lm)
library(DescTools)
PseudoR2(post.lm, which = "Nagelkerke")
